#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(std430, set = 0, binding = 0) readonly buffer uuOctree { uint uOctree[]; };
layout(set = 1, binding = 0) uniform uuCamera { vec4 uPosition, uLook, uSide, uUp; };

layout(set = 2, binding = 0) uniform sampler2D uEnvironmentMap;
layout(set = 2, binding = 1) uniform usampler2D uEnvMapAliasTable;

layout(std430, set = 3, binding = 0) buffer uuSobol { uint uSobol[]; };

layout(rgba32f, set = 4, binding = 0) uniform image2D uColor;
layout(rgba8, set = 4, binding = 1) uniform image2D uAlbedo;
layout(rgba8_snorm, set = 4, binding = 2) uniform image2D uNormal;

layout(set = 5, binding = 0) uniform sampler2D uNoise;

layout(push_constant) uniform uuPushConstant {
	uint uBounce, uLightType;
	float uConstColor[3], uEnvMapRotation, uEnvMapMultiplier;
};

bool RayMarchLeaf(vec3 o, vec3 d, out vec3 o_pos, out vec3 o_color, out vec3 o_normal);
bool RayMarchOcclude(vec3 o, vec3 d);

vec3 GenRay(in const ivec2 pixel, in const ivec2 size, in const vec2 noise) {
	vec2 coord = (vec2(pixel) + noise) / vec2(size);
	coord = coord * 2.0f - 1.0f;
	return normalize(uLook.xyz - uSide.xyz * coord.x - uUp.xyz * coord.y);
}
vec2 GetSobol(in const int i) { return vec2(uSobol[i << 1], uSobol[i << 1 | 1]) / 4294967296.0; }

#define PI 3.1415926535897932384626433832795
#define DIFFUSE_BSDF (1.0 / PI)
vec3 AlignDirection(in const vec3 dir, in const vec3 target) {
	vec3 u = normalize(cross(abs(target.x) > .01 ? vec3(0, 1, 0) : vec3(1, 0, 0), target));
	vec3 v = cross(target, u);
	return dir.x * u + dir.y * v + dir.z * target;
}

// Diffuse
vec3 DiffuseSample(in const vec3 normal, in const vec2 samp, out float pdf) {
	// cosine hemisphere sampling
	float r = sqrt(samp.x), phi = 2 * PI * samp.y;
	vec3 d = vec3(r * cos(phi), r * sin(phi), sqrt(1.0 - samp.x));
	// calculate pdf (dot(n, d) / PI)
	pdf = d.z / PI;
	return AlignDirection(d, normal);
}
float DiffusePDF(in float ndd) { return ndd / PI; }

// Environment Map
vec2 EnvMapCoord(in const vec3 d) { return vec2((atan(d.x, d.z) + uEnvMapRotation) / PI * 0.5, acos(d.y) / PI); }
float EnvMapPDF(in const vec3 d) {
	return texture(uEnvironmentMap, EnvMapCoord(d)).w / (2 * PI * PI * sqrt(1 - d.y * d.y));
}
ivec2 EnvMapIndexToPixel(in const ivec2 env_map_dim, in const uint idx) {
	return ivec2(idx % env_map_dim.x, idx / env_map_dim.x);
}
vec3 EnvMapSample(in const ivec2 env_map_dim, in const vec2 samp, out vec3 light, out float pdf) {
	uint sz = env_map_dim.x * env_map_dim.y;

	// sample alias table
	uint idx = clamp(uint(samp.x * float(sz)), 0u, sz - 1u), prob = uint(samp.y * 4294967296.0);
	ivec2 pix = EnvMapIndexToPixel(env_map_dim, idx);
	uvec2 alias = texelFetch(uEnvMapAliasTable, pix, 0).xy;
	if (prob > alias.x)
		pix = EnvMapIndexToPixel(env_map_dim, alias.y);

	// calculate dir and pdf
	vec2 uv = (vec2(pix) + 0.5) / vec2(env_map_dim);
	float phi = 2.0 * PI * uv.x - uEnvMapRotation, theta = PI * uv.y;
	float sin_theta = sin(theta);
	vec4 texel = texelFetch(uEnvironmentMap, pix, 0);
	light = texel.xyz;
	pdf = texel.w / (2 * PI * PI * sin_theta);
	return vec3(sin_theta * sin(phi), cos(theta), sin_theta * cos(phi));
}

// MIS Weight
float PowerHeuristic(in const float a, in const float b) {
	float t = a * a;
	return t / (b * b + t);
}

// Lights
vec3 EnvLight(in const vec3 d) { return texture(uEnvironmentMap, EnvMapCoord(d)).xyz; }
vec3 ConstLight() { return vec3(uConstColor[0], uConstColor[1], uConstColor[2]); }

vec3 ConstColorPathTrace(vec3 o, vec3 d, in const vec2 noise, out vec3 direct_albedo, out vec3 direct_normal) {
	vec3 acc_color = vec3(1), radiance = vec3(0), pos, albedo, normal;

	if (RayMarchLeaf(o, d, pos, albedo, normal)) {
		acc_color *= albedo;
		direct_albedo = albedo;
		direct_normal = normal;

		float bsdf_pdf;
		for (int cur = 1; cur < uBounce; ++cur) {
			vec2 samp = fract(GetSobol(cur) + noise);

			o = pos;
			d = DiffuseSample(normal, samp, bsdf_pdf);

			if (RayMarchLeaf(o, d, pos, albedo, normal))
				acc_color *= albedo; // * ndd * DIFFUSE_BSDF / bsdf_pdf;
			else {
				radiance = acc_color * ConstLight(); // * ndd * DIFFUSE_BSDF / bsdf_pdf;
				break;
			}
		}
	} else {
		radiance = ConstLight();
		direct_albedo = direct_normal = vec3(0);
	}

	return radiance;
}

vec3 EnvMapPathTrace(vec3 o, vec3 d, in const vec2 noise, out vec3 direct_albedo, out vec3 direct_normal) {
	ivec2 env_map_dim = textureSize(uEnvironmentMap, 0).xy;
	vec3 acc_color = vec3(1), radiance = vec3(0), pos, albedo, normal;

	if (RayMarchLeaf(o, d, pos, albedo, normal)) {
		acc_color *= albedo;
		direct_albedo = albedo;
		direct_normal = normal;

		float light_pdf, bsdf_pdf, ndd;
		for (int cur = 1; cur < uBounce; ++cur) {
			vec2 samp = fract(GetSobol(cur) + noise);

			o = pos;
			{
				// Multiple Importance Sampling (light)
				vec3 env_light;
				d = EnvMapSample(env_map_dim, samp, env_light, light_pdf);
				ndd = dot(normal, d);

				if (ndd > 0.0 && !isnan(light_pdf) && light_pdf > 0.0 && !RayMarchOcclude(o, d)) {
					bsdf_pdf = DiffusePDF(ndd);
					radiance += acc_color * env_light * uEnvMapMultiplier * PowerHeuristic(light_pdf, bsdf_pdf) * ndd *
					            DIFFUSE_BSDF / light_pdf;
				}
			}

			d = DiffuseSample(normal, samp, bsdf_pdf);
			// ndd = dot(normal, d);

			if (RayMarchLeaf(o, d, pos, albedo, normal))
				acc_color *= albedo; // * ndd * DIFFUSE_BSDF / bsdf_pdf;
			else {
				// Multiple Importance Sampling (bsdf)
				light_pdf = EnvMapPDF(d);
				if (!isnan(light_pdf) && light_pdf > 0.0)
					radiance += acc_color * EnvLight(d) * uEnvMapMultiplier * PowerHeuristic(bsdf_pdf, light_pdf);
				// * ndd * DIFFUSE_BSDF / bsdf_pdf;
				break;
			}
		}
	} else {
		radiance = EnvLight(d);
		direct_albedo = direct_normal = vec3(0);
	}

	return radiance;
}

void main() {
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy), size = imageSize(uColor);
	if (pixel.x >= size.x || pixel.y >= size.y)
		return;

	vec2 noise = texelFetch(uNoise, pixel & 0xff, 0).xy;
	vec3 o = uPosition.xyz, d = GenRay(pixel, size, GetSobol(0));

	vec3 direct_albedo, direct_normal;
	vec3 radiance = uLightType == 0 ? ConstColorPathTrace(o, d, noise, direct_albedo, direct_normal)
	                                : EnvMapPathTrace(o, d, noise, direct_albedo, direct_normal);

	uint spp = uSobol[(uBounce + 1) << 1];
	vec3 pt_color = (imageLoad(uColor, pixel).xyz * spp + radiance) / float(spp + 1);
	imageStore(uColor, pixel, vec4(pt_color, 1));

	vec3 pt_albedo = (imageLoad(uAlbedo, pixel).xyz * spp + direct_albedo) / float(spp + 1);
	imageStore(uAlbedo, pixel, vec4(pt_albedo, 1));

	vec3 pt_normal = (imageLoad(uNormal, pixel).xyz * spp + direct_normal) / float(spp + 1);
	imageStore(uNormal, pixel, vec4(pt_normal, 1));
}

// The following code is copied from
// https://code.google.com/archive/p/efficient-sparse-voxel-octrees/
/*
 *  Copyright (c) 2009-2011, NVIDIA Corporation
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of NVIDIA Corporation nor the
 *        names of its contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#define STACK_SIZE 23
#define EPS 1.1920928955078125e-07
struct StackItem {
	uint node;
	float t_max;
} stack[STACK_SIZE];
bool RayMarchLeaf(vec3 o, vec3 d, out vec3 o_pos, out vec3 o_color, out vec3 o_normal) {
	d.x = abs(d.x) >= EPS ? d.x : (d.x >= 0 ? EPS : -EPS);
	d.y = abs(d.y) >= EPS ? d.y : (d.y >= 0 ? EPS : -EPS);
	d.z = abs(d.z) >= EPS ? d.z : (d.z >= 0 ? EPS : -EPS);

	// Precompute the coefficients of tx(x), ty(y), and tz(z).
	// The octree is assumed to reside at coordinates [1, 2].
	vec3 t_coef = 1.0f / -abs(d);
	vec3 t_bias = t_coef * o;

	uint oct_mask = 0u;
	if (d.x > 0.0f)
		oct_mask ^= 1u, t_bias.x = 3.0f * t_coef.x - t_bias.x;
	if (d.y > 0.0f)
		oct_mask ^= 2u, t_bias.y = 3.0f * t_coef.y - t_bias.y;
	if (d.z > 0.0f)
		oct_mask ^= 4u, t_bias.z = 3.0f * t_coef.z - t_bias.z;

	// Initialize the active span of t-values.
	float t_min = max(max(2.0f * t_coef.x - t_bias.x, 2.0f * t_coef.y - t_bias.y), 2.0f * t_coef.z - t_bias.z);
	float t_max = min(min(t_coef.x - t_bias.x, t_coef.y - t_bias.y), t_coef.z - t_bias.z);
	t_min = max(t_min, 0.0f);
	float h = t_max;

	uint parent = 0u;
	uint cur = 0u;
	vec3 pos = vec3(1.0f);
	uint idx = 0u;
	if (1.5f * t_coef.x - t_bias.x > t_min)
		idx ^= 1u, pos.x = 1.5f;
	if (1.5f * t_coef.y - t_bias.y > t_min)
		idx ^= 2u, pos.y = 1.5f;
	if (1.5f * t_coef.z - t_bias.z > t_min)
		idx ^= 4u, pos.z = 1.5f;

	uint scale = STACK_SIZE - 1;
	float scale_exp2 = 0.5f; // exp2( scale - STACK_SIZE )

	while (scale < STACK_SIZE) {
		if (cur == 0u)
			cur = uOctree[parent + (idx ^ oct_mask)];
		// Determine maximum t-value of the cube by evaluating
		// tx(), ty(), and tz() at its corner.

		vec3 t_corner = pos * t_coef - t_bias;
		float tc_max = min(min(t_corner.x, t_corner.y), t_corner.z);

		if ((cur & 0x80000000u) != 0 && t_min <= t_max) {
			// INTERSECT
			float tv_max = min(t_max, tc_max);
			float half_scale_exp2 = scale_exp2 * 0.5f;
			vec3 t_center = half_scale_exp2 * t_coef + t_corner;

			if (t_min <= tv_max) {
				if ((cur & 0x40000000u) != 0) // leaf node
					break;

				// PUSH
				if (tc_max < h) {
					stack[scale].node = parent;
					stack[scale].t_max = t_max;
				}
				h = tc_max;

				parent = cur & 0x3fffffffu;

				idx = 0u;
				--scale;
				scale_exp2 = half_scale_exp2;
				if (t_center.x > t_min)
					idx ^= 1u, pos.x += scale_exp2;
				if (t_center.y > t_min)
					idx ^= 2u, pos.y += scale_exp2;
				if (t_center.z > t_min)
					idx ^= 4u, pos.z += scale_exp2;

				cur = 0;
				t_max = tv_max;

				continue;
			}
		}

		// ADVANCE
		uint step_mask = 0u;
		if (t_corner.x <= tc_max)
			step_mask ^= 1u, pos.x -= scale_exp2;
		if (t_corner.y <= tc_max)
			step_mask ^= 2u, pos.y -= scale_exp2;
		if (t_corner.z <= tc_max)
			step_mask ^= 4u, pos.z -= scale_exp2;

		// Update active t-span and flip bits of the child slot index.
		t_min = tc_max;
		idx ^= step_mask;

		// Proceed with pop if the bit flips disagree with the ray direction.
		if ((idx & step_mask) != 0) {
			// POP
			// Find the highest differing bit between the two positions.
			uint differing_bits = 0;
			if ((step_mask & 1u) != 0)
				differing_bits |= floatBitsToUint(pos.x) ^ floatBitsToUint(pos.x + scale_exp2);
			if ((step_mask & 2u) != 0)
				differing_bits |= floatBitsToUint(pos.y) ^ floatBitsToUint(pos.y + scale_exp2);
			if ((step_mask & 4u) != 0)
				differing_bits |= floatBitsToUint(pos.z) ^ floatBitsToUint(pos.z + scale_exp2);
			scale = findMSB(differing_bits);
			scale_exp2 = uintBitsToFloat((scale - STACK_SIZE + 127u) << 23u); // exp2f(scale - s_max)

			// Restore parent voxel from the stack.
			parent = stack[scale].node;
			t_max = stack[scale].t_max;

			// Round cube position and extract child slot index.
			uint shx = floatBitsToUint(pos.x) >> scale;
			uint shy = floatBitsToUint(pos.y) >> scale;
			uint shz = floatBitsToUint(pos.z) >> scale;
			pos.x = uintBitsToFloat(shx << scale);
			pos.y = uintBitsToFloat(shy << scale);
			pos.z = uintBitsToFloat(shz << scale);
			idx = (shx & 1u) | ((shy & 1u) << 1u) | ((shz & 1u) << 2u);

			// Prevent same parent from being stored again and invalidate cached
			// child descriptor.
			h = 0.0f;
			cur = 0;
		}
	}

	vec3 norm, t_corner = t_coef * (pos + scale_exp2) - t_bias;
	if (t_corner.x > t_corner.y && t_corner.x > t_corner.z)
		norm = vec3(-1, 0, 0);
	else if (t_corner.y > t_corner.z)
		norm = vec3(0, -1, 0);
	else
		norm = vec3(0, 0, -1);

	if ((oct_mask & 1u) == 0u)
		norm.x = -norm.x;
	if ((oct_mask & 2u) == 0u)
		norm.y = -norm.y;
	if ((oct_mask & 4u) == 0u)
		norm.z = -norm.z;

	// Undo mirroring of the coordinate system.
	if ((oct_mask & 1u) != 0u)
		pos.x = 3.0f - scale_exp2 - pos.x;
	if ((oct_mask & 2u) != 0u)
		pos.y = 3.0f - scale_exp2 - pos.y;
	if ((oct_mask & 4u) != 0u)
		pos.z = 3.0f - scale_exp2 - pos.z;

	// Output results.
	o_pos = clamp(o + t_min * d, pos, pos + scale_exp2);
	if (norm.x != 0)
		o_pos.x = norm.x > 0 ? pos.x + scale_exp2 + EPS * 2 : pos.x - EPS;
	if (norm.y != 0)
		o_pos.y = norm.y > 0 ? pos.y + scale_exp2 + EPS * 2 : pos.y - EPS;
	if (norm.z != 0)
		o_pos.z = norm.z > 0 ? pos.z + scale_exp2 + EPS * 2 : pos.z - EPS;
	o_normal = norm;
	o_color = vec3(cur & 0xffu, (cur >> 8u) & 0xffu, (cur >> 16u) & 0xffu) * 0.00392156862745098f; // (...) / 255.0f

	return scale < STACK_SIZE && t_min <= t_max;
}
bool RayMarchOcclude(vec3 o, vec3 d) {
	d.x = abs(d.x) >= EPS ? d.x : (d.x >= 0 ? EPS : -EPS);
	d.y = abs(d.y) >= EPS ? d.y : (d.y >= 0 ? EPS : -EPS);
	d.z = abs(d.z) >= EPS ? d.z : (d.z >= 0 ? EPS : -EPS);

	// Precompute the coefficients of tx(x), ty(y), and tz(z).
	// The octree is assumed to reside at coordinates [1, 2].
	vec3 t_coef = 1.0f / -abs(d);
	vec3 t_bias = t_coef * o;

	uint oct_mask = 0u;
	if (d.x > 0.0f)
		oct_mask ^= 1u, t_bias.x = 3.0f * t_coef.x - t_bias.x;
	if (d.y > 0.0f)
		oct_mask ^= 2u, t_bias.y = 3.0f * t_coef.y - t_bias.y;
	if (d.z > 0.0f)
		oct_mask ^= 4u, t_bias.z = 3.0f * t_coef.z - t_bias.z;

	// Initialize the active span of t-values.
	float t_min = max(max(2.0f * t_coef.x - t_bias.x, 2.0f * t_coef.y - t_bias.y), 2.0f * t_coef.z - t_bias.z);
	float t_max = min(min(t_coef.x - t_bias.x, t_coef.y - t_bias.y), t_coef.z - t_bias.z);
	t_min = max(t_min, 0.0f);
	float h = t_max;

	uint parent = 0u;
	uint cur = 0u;
	vec3 pos = vec3(1.0f);
	uint idx = 0u;
	if (1.5f * t_coef.x - t_bias.x > t_min)
		idx ^= 1u, pos.x = 1.5f;
	if (1.5f * t_coef.y - t_bias.y > t_min)
		idx ^= 2u, pos.y = 1.5f;
	if (1.5f * t_coef.z - t_bias.z > t_min)
		idx ^= 4u, pos.z = 1.5f;

	uint scale = STACK_SIZE - 1;
	float scale_exp2 = 0.5f; // exp2( scale - STACK_SIZE )

	while (scale < STACK_SIZE) {
		if (cur == 0u)
			cur = uOctree[parent + (idx ^ oct_mask)];
		// Determine maximum t-value of the cube by evaluating
		// tx(), ty(), and tz() at its corner.

		vec3 t_corner = pos * t_coef - t_bias;
		float tc_max = min(min(t_corner.x, t_corner.y), t_corner.z);

		if ((cur & 0x80000000u) != 0 && t_min <= t_max) {
			// INTERSECT
			float tv_max = min(t_max, tc_max);
			float half_scale_exp2 = scale_exp2 * 0.5f;
			vec3 t_center = half_scale_exp2 * t_coef + t_corner;

			if (t_min <= tv_max) {
				if ((cur & 0x40000000u) != 0) // leaf node
					break;

				// PUSH
				if (tc_max < h) {
					stack[scale].node = parent;
					stack[scale].t_max = t_max;
				}
				h = tc_max;

				parent = cur & 0x3fffffffu;

				idx = 0u;
				--scale;
				scale_exp2 = half_scale_exp2;
				if (t_center.x > t_min)
					idx ^= 1u, pos.x += scale_exp2;
				if (t_center.y > t_min)
					idx ^= 2u, pos.y += scale_exp2;
				if (t_center.z > t_min)
					idx ^= 4u, pos.z += scale_exp2;

				cur = 0;
				t_max = tv_max;

				continue;
			}
		}

		// ADVANCE
		uint step_mask = 0u;
		if (t_corner.x <= tc_max)
			step_mask ^= 1u, pos.x -= scale_exp2;
		if (t_corner.y <= tc_max)
			step_mask ^= 2u, pos.y -= scale_exp2;
		if (t_corner.z <= tc_max)
			step_mask ^= 4u, pos.z -= scale_exp2;

		// Update active t-span and flip bits of the child slot index.
		t_min = tc_max;
		idx ^= step_mask;

		// Proceed with pop if the bit flips disagree with the ray direction.
		if ((idx & step_mask) != 0) {
			// POP
			// Find the highest differing bit between the two positions.
			uint differing_bits = 0;
			if ((step_mask & 1u) != 0)
				differing_bits |= floatBitsToUint(pos.x) ^ floatBitsToUint(pos.x + scale_exp2);
			if ((step_mask & 2u) != 0)
				differing_bits |= floatBitsToUint(pos.y) ^ floatBitsToUint(pos.y + scale_exp2);
			if ((step_mask & 4u) != 0)
				differing_bits |= floatBitsToUint(pos.z) ^ floatBitsToUint(pos.z + scale_exp2);
			scale = findMSB(differing_bits);
			scale_exp2 = uintBitsToFloat((scale - STACK_SIZE + 127u) << 23u); // exp2f(scale - s_max)

			// Restore parent voxel from the stack.
			parent = stack[scale].node;
			t_max = stack[scale].t_max;

			// Round cube position and extract child slot index.
			uint shx = floatBitsToUint(pos.x) >> scale;
			uint shy = floatBitsToUint(pos.y) >> scale;
			uint shz = floatBitsToUint(pos.z) >> scale;
			pos.x = uintBitsToFloat(shx << scale);
			pos.y = uintBitsToFloat(shy << scale);
			pos.z = uintBitsToFloat(shz << scale);
			idx = (shx & 1u) | ((shy & 1u) << 1u) | ((shz & 1u) << 2u);

			// Prevent same parent from being stored again and invalidate cached
			// child descriptor.
			h = 0.0f;
			cur = 0;
		}
	}
	return scale < STACK_SIZE && t_min <= t_max;
}
