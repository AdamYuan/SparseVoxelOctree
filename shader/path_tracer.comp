#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "diffuse.glsl"
#include "mis.glsl"
#include "util.glsl"

#define OCTREE_SET 0
#include "octree.glsl"
#define CAMERA_SET 1
#include "camera.glsl"
#define ENVIRONMENT_MAP_SET 2
#define ENVIRONMENT_MAP_ENABLE_SAMPLE 1
#include "environment_map.glsl"
#define SOBOL_SET 3
#include "sobol.glsl"

layout(rgba32f, set = 4, binding = 0) uniform image2D uColor;
layout(rgba8, set = 4, binding = 1) uniform image2D uAlbedo;
layout(rgba8_snorm, set = 4, binding = 2) uniform image2D uNormal;

layout(set = 5, binding = 0) uniform sampler2D uNoise;

layout(push_constant) uniform uuPushConstant {
	uint uBounce, uLightType;
	float uConstColor[3], uEnvMapRotation, uEnvMapMultiplier;
};

// Lights
vec3 ConstLight() { return vec3(uConstColor[0], uConstColor[1], uConstColor[2]); }

vec3 ConstColorPathTrace(vec3 o, vec3 d, in const vec2 noise, out vec3 direct_albedo, out vec3 direct_normal) {
	vec3 acc_color = vec3(1), radiance = vec3(0), pos, albedo, normal;

	if (Octree_RayMarchLeaf(o, d, pos, albedo, normal)) {
		acc_color *= albedo;
		direct_albedo = albedo;
		direct_normal = normal;

		float bsdf_pdf;
		for (uint cur = 1; cur < uBounce; ++cur) {
			vec2 samp = fract(Sobol_GetVec2(cur) + noise);

			o = pos;
			d = Diffuse_Sample(normal, samp, bsdf_pdf);

			if (Octree_RayMarchLeaf(o, d, pos, albedo, normal))
				acc_color *= albedo; // * ndd * DIFFUSE_BSDF / bsdf_pdf;
			else {
				radiance = acc_color * ConstLight(); // * ndd * DIFFUSE_BSDF / bsdf_pdf;
				break;
			}
		}
	} else {
		radiance = ConstLight();
		direct_albedo = direct_normal = vec3(0);
	}

	return radiance;
}

vec3 EnvMapPathTrace(vec3 o, vec3 d, in const vec2 noise, out vec3 direct_albedo, out vec3 direct_normal) {
	vec3 acc_color = vec3(1), radiance = vec3(0), pos, albedo, normal;

	if (Octree_RayMarchLeaf(o, d, pos, albedo, normal)) {
		acc_color *= albedo;
		direct_albedo = albedo;
		direct_normal = normal;

		float light_pdf, bsdf_pdf, ndd;
		for (uint cur = 1; cur < uBounce; ++cur) {
			vec2 samp = fract(Sobol_GetVec2(cur) + noise);

			o = pos;
			{
				// Multiple Importance Sampling (light)
				vec3 env_light;
				d = EnvMap_Sample(samp, uEnvMapRotation, env_light, light_pdf);
				ndd = dot(normal, d);

				if (ndd > 0.0 && !isnan(light_pdf) && light_pdf > 0.0 && !Octree_RayMarchOcclude(o, d)) {
					bsdf_pdf = Diffuse_PDF(ndd);
					radiance += acc_color * env_light * uEnvMapMultiplier * MIS_PowerHeuristic(light_pdf, bsdf_pdf) *
					            ndd * DIFFUSE_BSDF / light_pdf;
				}
			}

			d = Diffuse_Sample(normal, samp, bsdf_pdf);
			// ndd = dot(normal, d);

			if (Octree_RayMarchLeaf(o, d, pos, albedo, normal))
				acc_color *= albedo; // * ndd * DIFFUSE_BSDF / bsdf_pdf;
			else {
				// Multiple Importance Sampling (bsdf)
				light_pdf = EnvMap_PDF(d, uEnvMapRotation);
				if (!isnan(light_pdf) && light_pdf > 0.0)
					radiance += acc_color * EnvMap_Radiance(d, uEnvMapRotation) * uEnvMapMultiplier *
					            MIS_PowerHeuristic(bsdf_pdf, light_pdf);
				// * ndd * DIFFUSE_BSDF / bsdf_pdf;
				break;
			}
		}
	} else {
		radiance = EnvMap_Radiance(d, uEnvMapRotation);
		direct_albedo = direct_normal = vec3(0);
	}

	return radiance;
}

void main() {
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy), size = imageSize(uColor);
	if (pixel.x >= size.x || pixel.y >= size.y)
		return;

	vec2 noise = texelFetch(uNoise, pixel & 0xff, 0).xy;
	vec3 o = uPosition.xyz, d = Camera_GenRay((vec2(pixel) + Sobol_GetVec2(0)) / vec2(size));

	vec3 direct_albedo, direct_normal;
	vec3 radiance = uLightType == 0 ? ConstColorPathTrace(o, d, noise, direct_albedo, direct_normal)
	                                : EnvMapPathTrace(o, d, noise, direct_albedo, direct_normal);

	uint spp = Sobol_Current((uBounce + 1) << 1);
	vec3 pt_color = (imageLoad(uColor, pixel).xyz * spp + radiance) / float(spp + 1);
	imageStore(uColor, pixel, vec4(pt_color, 1));

	vec3 pt_albedo = (imageLoad(uAlbedo, pixel).xyz * spp + direct_albedo) / float(spp + 1);
	imageStore(uAlbedo, pixel, vec4(pt_albedo, 1));

	vec3 pt_normal = (imageLoad(uNormal, pixel).xyz * spp + direct_normal) / float(spp + 1);
	imageStore(uNormal, pixel, vec4(pt_normal, 1));
}
